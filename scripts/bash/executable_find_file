#!/bin/bash

show_usage() {
    echo 'Usage: find_file [options] [date] [num_results]
    Options
        -h, --help      Show this message and exit
        -o, --old       Finds older files starting from date
        -n, --new       Finds newer files starting from date
    Required
        [date]          The date formatted as YYYY-MM-DD
        [num_results]   The number of desired results
    '
}

find_older() {
    date=$1
    num_results=$2
    find . -not -newermt $date -ls | tr -s ' '  | awk -v OFS='\t' '{print $6,$7,$8,$9,$10,$11}' | head -n $num_results
}

find_newer() {
    date=$1
    num_results=$2
    find . -newermt $date -ls | tr -s ' '  | awk -v OFS='\t' '{print $6,$7,$8,$9,$10,$11}' | head -n $num_results
}

is_valid() {
    re=$1
    str=$2
    [[ $str =~ $re ]] && true || false 
}

is_valid_date() {
    is_valid '^[0-9]{4}-[0-9]{2}-[0-9]{2}' $1
}

is_valid_num() {
    is_valid "^[0-9]+" $1
}

if [[ $1 == "-h" || $1 == "--help" ]]; then
    show_usage
elif [[ -z "$1" || -z "$2" || -z "$3" ]]; then
    show_usage
else
    if [[ "$(is_valid_date $2)" -eq true && "$(is_valid_num $3)" -eq true ]]; then
        if [[ $1 == "-o" || $1 == "--old" ]]; then
            find_older $2 $3
        elif [[ $1 == "-n" || $1 == "--new" ]]; then
            find_newer $2 $3
        fi
    fi
fi
