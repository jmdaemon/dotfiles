set nocompatible              " be iMproved, required
filetype off                  " required

if empty(glob("~/.local/share/nvim/site/autoload"))
    execute '!curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim '
endif

call plug#begin('~/.config/nvim/plugged')

let g:polyglot_disabled = ['java']

" NeoViM Plugins
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'sakhnik/nvim-gdb', { 'do': ':!./install.sh \| UpdateRemotePlugins' }
Plug 'neomake/neomake'
Plug 'Scuilion/gradle-syntastic-plugin'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'NLKNguyen/papercolor-theme'   , { 'on': [] }
Plug 'kaicataldo/material.vim'      , { 'on': [], 'branch': 'main'}
Plug 'tomasr/molokai'               , { 'on': [] }
Plug 'gruvbox-community/gruvbox'    , { 'on': [] }
Plug 'chriskempson/base16-vim'
Plug 'vim-syntastic/syntastic'
Plug 'ryanoasis/vim-devicons'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'numkil/ag.nvim'
Plug 'tpope/vim-dispatch'
Plug 'chrisbra/unicode.vim'
Plug 'majutsushi/tagbar'
Plug 'RustemB/sixtyfps-vim'
Plug 'slint-ui/vim-slint'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'tmhedberg/SimpylFold'
Plug 'jeetsukumaran/vim-indentwise'
Plug 'tpope/vim-surround'
Plug 'edkolev/tmuxline.vim'
Plug 'lilydjwg/fcitx.vim', { 'on': [] }
Plug 'sheerun/vim-polyglot'
Plug 'editorconfig/editorconfig-vim'
Plug 'kovisoft/slimv'
Plug 'Chiel92/vim-autoformat'
Plug 'liuchengxu/graphviz.vim'      , { 'for': ['.gv', 'dot']}
Plug 'iamcco/markdown-preview.nvim' , { 'for': ['markdown', 'md'], 'do': {-> mkdp#util#install()}}
Plug 'habamax/vim-asciidoctor'      , { 'for': ['adoc', 'asciidoc', 'asc']}
Plug 'lervag/vimtex'                , { 'for': ['tex', 'cls']}
Plug 'cespare/vim-toml'             , { 'for': 'toml'}
Plug 'jph00/swift-apple'            , { 'for': 'swift' }
Plug 'rust-lang/rust.vim'           , { 'for': 'rs'}
Plug 'JuliaEditorSupport/julia-vim' , { 'for': 'jl'}
Plug 'vim-scripts/indentpython.vim' , { 'for': 'py' }
Plug 'leafgarland/typescript-vim'   , { 'for': 'ts' }
Plug 'pangloss/vim-javascript'      , { 'for': 'js' }
Plug 'MaxMEllon/vim-jsx-pretty'     , { 'for': 'jsx' }
Plug 'PumpkinPai/lslvimazing'       , { 'for': 'lsl'}
#Plug 'UltiRequiem/coc-cl', { 'do': 'yarn install --frozen-lockfile && yarn build'}
" My Local Plugins
" These are Vim plugins that I have developed
Plug '~/Workspace/apps/vimscript/vim-alphasort'

call plug#end()

if !has('nvim')
  set viminfo+=~/.local/share/vim/viminfo
endif

"================ Syntastic ==============="
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Java
"let g:syntastic_java_checker = ['javac']
let g:syntastic_java_checkers=['java']
let g:syntastic_java_javac_config_file_enabled = 1
"let g:syntastic_java__checkstyle_classpath="./syntactic_javac_config"


" C/C++
let g:syntastic_c_compiler_options = '-std=C18'
let g:syntastic_cpp_compiler_options = '-std=c++17x'

" YAML
let g:syntastic_yaml_checkers = [ "yamllint" ]

" Python
" Disables python flake8, lacheck for tex, shellcheck for sh
let g:syntastic_mode_map = { 'passive_filetypes': ['python', 'tex', 'sh'] }

" Racket
let g:syntastic_enable_racket_racket_checker = 1

"================== Theme ================="
syntax enable
if filereadable(expand("~/.config/nvim/vimrc_background"))
    "let base16colorspace=256
    source ~/.config/nvim/vimrc_background
endif

set background=dark
set termguicolors
set softtabstop=4
set expandtab
set shiftwidth=4

"================ Config ==============="
set number
set showcmd
set cursorline
filetype indent on
set showmatch
set laststatus=2
set autoread
" https://stackoverflow.com/questions/58403300/vimrc-tags-option-specification-for-git-tags-files
set tags^=.git/tags;~

"================ Searching ==============="
set incsearch
set hlsearch
:hi Search ctermbg=3 ctermfg=8

"================ Movement ================"
set ttyfast
nnoremap B ^
nnoremap E $
set backspace=indent,eol,start
nnoremap <C-L> <C-W><C-L>
nnoremap <C-K> <C-W><C-K> nnoremap <C-J> <C-W><C-J>
nnoremap <C-H> <C-W><C-H>

"================ Shortcuts ==============="
let mapleader='\'
set pastetoggle=<F9>
inoremap jk <esc>
nnoremap <leader>? :set ft?<CR>
nnoremap <leader>ve :vsp ~/.vimrc<CR>
nnoremap <leader>vs :source ~/.vimrc<CR>
nnoremap <leader>w :update<CR>
nnoremap <leader>. :CtrlPTag<CR>
nnoremap <leader>md :MarkdownPreview<CR>
nnoremap <leader>d :NERDTree<CR>
nnoremap <leader>] :noh<CR>
nnoremap <leader>' :call VimtexConcealToggle()<CR>
nnoremap <leader>af :Autoformat<CR>

function! VimtexConcealToggle()
    if &conceallevel
        setlocal conceallevel=0
    else
        setlocal conceallevel=1
    endif
endfunction

nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
"nnoremap <leader>f :!`ctags -R -f ./.git/tags .`<CR>
nnoremap <leader>t :!`git ctags`<CR>
nnoremap <leader>tg :TagbarToggle <CR>

" Bind \ q to toggle double quotes
nnoremap <leader>q :cs"q <CR>
nnoremap H gT
nnoremap L gt
vnoremap <Space> zf
"nnoremap <leader>q 0i"<Esc>Ea"<Esc>

" Correct last misspelling
inoremap <leader>cs <c-g>u<Esc>[s1z=`]a<c-g>u

" https://github.com/gillescastel/inkscape-figures
" https://castel.dev/post/lecture-notes-2/
inoremap <C-f> <Esc>: silent exec '.!inkscape-figures create "'.getline('.').'" "'.b:vimtex.root.'/figures/"'<CR><CR>:w<CR>
nnoremap <C-f> : silent exec '!inkscape-figures edit "'.b:vimtex.root.'/figures/" > /dev/null 2>&1 &'<CR><CR>:redraw!<CR>

" Sources: 
" https://vim.fandom.com/wiki/GNU/Linux_clipboard_copy/paste_with_xclip
" https://stackoverflow.com/questions/5240473/in-vim-with-xclip-yank-to-clipboard
" https://vi.stackexchange.com/questions/84/how-can-i-copy-text-to-the-system-clipboard-from-vim
" Yank to xclip (Use whichever works best)
vnoremap <silent><Leader>y "yy <Bar> :call system('xclip -sel clip', @y)<CR>
"map <silent><Leader>y "+y

nmap <M-s> <Plug>MarkdownPreviewStop
nmap <C-p> <Plug>MarkdownPreviewToggle

"vmap <expr><F5> :call alphasort#SortImports(<args>)<CR>
"vmap <expr><F5> :call alphasort#SortImports(<args>)<CR>
"vmap <expr><F5> :alphasort#SortImports(<args>)<CR>
"vmap <expr><F5> :alphasort#SortImports(<expr>)<CR>
vnoremap <F5> :SortImports<CR>

"=============== Vim Airline =============="
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

let g:airline_theme="tomorrow"
let g:airline#extensions#tmuxline#enabled = 1
let airline#extensions#tmuxline#snapshot_file = "~/.config/tmux/tmux-status.conf"

"================= Format ================="
setlocal foldmethod=expr
let g:autoformat_remove_trailing_spaces = 1

au BufNewFile,BufRead *.json,*.tsx,*.ts,*.js,*.html,*.css: set tabstop=2 softtabstop=2 shiftwidth=2
au BufNewFile,BufRead *.cls set filetype=tex
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
autocmd FileType css set omnifunc=csscomplete#CompleteCSS

autocmd BufEnter *.h :setlocal filetype=cpp
autocmd BufEnter *.hpp :setlocal filetype=cpp
autocmd BufEnter *.tpp :setlocal filetype=cpp
autocmd BufEnter *.sh.tmpl :setlocal filetype=sh
autocmd BufEnter *.60 :setlocal filetype=sixtyfps
autocmd BufEnter *.slint :setlocal filetype=slint
autocmd BufEnter *.tsx :setlocal filetype=typescript.tsx
autocmd FileType *.tex set filetype=latex
autocmd BufEnter *.asd set filetype=lisp

let g:formatterpath = [ "$HOME/.config/nvim/after/ftplugin/" ]

map <leader>cf :py3f /usr/share/clang/clang-format.py<cr>
imap <leader>cf :py3f /usr/share/clang/clang-format.py<cr>

" https://www.chezmoi.io/docs/how-to/#configure-vim-to-run-chezmoi-apply-whenever-you-save-a-dotfile
autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path %

"================ LISP ================"

" To switch to the REPL in Swank        type: ^C ,
" To switch back to the file to edit    type: ^C w
" To execute commands you can type: <leader> <letter>
" https://kovisoft.github.io/slimv-tutorial/tutorial.html
let g:slimv_swank_cmd = '! {{ .terminal }} -e sbcl --load ~/.config/nvim/plugged/slimv/slime/start-swank.lisp &'
let g:lisp_rainbow=1
let g:paredit_mode=1
let g:paredit_electric_return=1
" For Ros
"let g:slimv_swank_cmd = \"!ros -e '(ql:quickload :swank) (swank:create-server)' wait &\"
"let g:slimv_lisp = 'ros run'
"let g:slimv_impl = 'sbcl'

" ============ LaTeX ============= "
let g:vimtex_compiler_progname = 'nvr'
let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
let g:vimtex_compiler_method = 'latexmk'
let g:vimtex_compiler_latexmk = {
        \ 'build_dir' : 'build',
        \ 'options' : [
        \   '-pdf',
        \   '-shell-escape',
        \   '-verbose',
        \   '-file-line-error',
        \   '-synctex=1',
        \   '-interaction=nonstopmode',
        \ ],
        \ }

" Vimtex
let g:tex_flavor = 'latex'

" https://stackoverflow.com/questions/8300982/vim-running-slow-with-latex-files
" https://stackoverflow.com/questions/15024035/vim-gvim-startup-very-slow-with-latex-suite
au FileType tex setlocal nocursorline
au FileType tex :NoMatchParen
let g:Tex_PackagesMenu = 0

" ============ Markdown ============= "
let g:mkdp_auto_start = 1
let g:mkdp_auto_close = 1
let g:mkdp_refresh_slow = 0
let g:mkdp_browser = 'firefox'
let g:mkdp_preview_options = {
    \ 'mkit': {},
    \ 'katex': {},
    \ 'uml': {},
    \ 'maid': {},
    \ 'disable_sync_scroll': 0,
    \ 'sync_scroll_type': 'middle',
    \ 'hide_yaml_meta': 1,
    \ 'sequence_diagrams': {},
    \ 'flowchart_diagrams': {},
    \ 'content_editable': v:false,
    \ 'disable_filename': 0
    \ }
let g:mkdp_markdown_css = ''
let g:mkdp_highlight_css = ''

" ============== AsciiDoctor ==============
let g:asciidoctor_executable = 'asciidoctor -b html5'

""" AsciiDoctor PDF
let g:asciidoctor_pdf_executable = 'asciidoctor-web-pdf'

""" Folding
let g:asciidoctor_folding = 0
let g:asciidoctor_fold_options = 0

""" Syntax
" Conceal *bold*, _italic_, `code` and urls in lists and paragraphs, default `0`.
" See limitations in end of the README
let g:asciidoctor_syntax_conceal = 1

" Highlight indented text, default `1`.
let g:asciidoctor_syntax_indented = 0

""" Syntax Highlighting
" List of filetypes to highlight, default `[]`
let g:asciidoctor_fenced_languages = ['python', 'c', 'javascript']

""" Function mappings
" Function to create buffer local mappings and add default compiler
fun! AsciidoctorMappings()
    nnoremap <buffer> <leader>oo :AsciidoctorOpenRAW<CR>
    nnoremap <buffer> <leader>op :AsciidoctorOpenPDF<CR>
    nnoremap <buffer> <leader>oh :AsciidoctorOpenHTML<CR>
    nnoremap <buffer> <leader>ox :AsciidoctorOpenDOCX<CR>
    nnoremap <buffer> <leader>ch :Asciidoctor2HTML<CR>
    nnoremap <buffer> <leader>cp :Asciidoctor2PDF<CR>
    nnoremap <buffer> <leader>cx :Asciidoctor2DOCX<CR>
    nnoremap <buffer> <leader>p :AsciidoctorPasteImage<CR>
    " :make will build pdfs
    compiler asciidoctor2pdf
endfun

" Call AsciidoctorMappings for all `*.adoc` and `*.asciidoc` files
augroup asciidoctor
    au!
    au BufEnter *.adoc,*.asciidoc call AsciidoctorMappings()
augroup END

func! ConvertAsciidoctorToHTML()
    " Text file with asciidoctor contents?
    if &filetype == 'text' && getline(1) =~ '^= .*$'
        " text files have no asciidoctor commands
        set filetype=asciidoctor
        Asciidoctor2HTML
        set filetype=text
    elseif &filetype == 'asciidoctor'
        Asciidoctor2HTML
    endif
endfunc
augroup ON_ASCIIDOCTOR_SAVE | au!
    au BufWritePost *.adoc,*.txt call ConvertAsciidoctorToHTML()
augroup end

" ================ CoC Nvim  ================
" Install these extensions if not already installed
let g:coc_global_extensions = [
            \ 'coc-css', 
            \ 'coc-html',
            \ 'coc-eslint', 
            \ 'coc-tsserver',
            \ 'coc-java', 
            \ 'coc-json', 
            \ 'coc-kotlin',
            \ 'coc-markdownlint', 
            "\ 'coc-snippets', 
            \ 'coc-lit-html',
            "\ 'coc-rls',
            \ 'coc-yaml',
            \ 'coc-rust-analyzer',
            \ 'coc-phpls',
            \ 'coc-deno',
            \ 'coc-solargraph'
            \ ]
            "\ 'coc-cl',

" TextEdit might fail if hidden is not set.
set hidden

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"
" remap for complete to use tab and <cr>
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()

inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()

hi CocSearch ctermfg=12 guifg=#18A3FF
hi CocMenuSel ctermbg=109 guibg=#13354A

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
nnoremap <leader>bf :Format<CR>

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" ================ coc-snippets ================
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<c-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)

" Use <leader>x for convert visual selected code to snippet
xmap <leader>x  <Plug>(coc-convert-snippet)
