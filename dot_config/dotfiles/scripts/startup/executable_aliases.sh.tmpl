#!/bin/bash/

# Shortcuts
#export excludes="$XDG_DATA_HOME"/excludes
#export bin="$LOCAL"
#export work="$HOME"/Workspace
export texpkg="$TEXMFHOME/tex/latex"

# LSD - https://github.com/Peltoche/lsd 
alias ls='lsd'
alias l='ls -l'
alias la='ls -a'
alias lla='ls -la'
alias lt='ls --tree'
alias tree='ls --tree'

alias cloc='tokei'

# Aliases
alias nv='nvim'
{{- if (eq .dsp "xorg" ) }}
alias xclip='xclip -sel clip' # X Server copy to clipboard
{{- end }}
alias start_env="source $HOME/.config/dotfiles/scripts/startup/start-env.sh"
alias szsh="source ~/.zshrc"
alias spro="source ~/.profile"
alias kzom="kill $(ps -A -ostat,ppid | awk '/[zZ]/ && !a[$2]++ {print $2}')"
alias expnode="export NODE_OPTIONS=--openssl-legacy-provider"
{{- if (eq .dsp "xorg" ) }}
alias scd="xset dpms force off"
{{- end }}
alias zhist="nvim $HOME/.history/zsh/{{ .system }}/zsh_history"
alias zhistc="cat $HOME/.history/zsh/{{ .system }}/zsh_history"
alias conda-init="source $DOTFILES/scripts/terminal/conda-init.sh"
{{- if (eq .terminal "kitty" ) }}
# https://github.com/kovidgoyal/kitty/issues/268 - For Kitty
alias clear="printf '\033[2J\033[3J\033[1;1H'" # Clear Terminal Scrollback
{{- end }}
{{- if (eq .system "arch-laptop" ) }}
# Yarn 2
yarnv="$(yarn -v)"
requiredver="2.0.0"
if [ "$(printf '%s\n' "$requiredver" "$yarnv" | sort -V | head -n1)" = "$requiredver" ]; then
    :
else
    alias yarn='yarn --use-yarnrc "$XDG_CONFIG_HOME/yarn/config"'
fi
{{- else if (eq .system "ubuntu-workstation" ) }}
alias yarn='yarn --use-yarnrc "$XDG_CONFIG_HOME/yarn/config"'
{{- end }}
#alias npm-list=`ls -l $(npm root -g) | cut -d ' ' -f 12`
alias pipup='pip3 list --outdated --format=freeze | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip3 install -U --user'
alias npmup='source ~/.config/dotfiles/scripts/autorun/npmup.sh'
alias vimup='nvim +PlugUpdate +PlugUpgrade +qall'
alias cz=chezmoi
{{- if (eq .system "ubuntu-workstation" ) }}
alias nvsmi="watch -n 1 nvidia-smi"
alias nvsmc="nvidia-smi --query-gpu=timestamp,pstate,temperature.gpu,utilization.gpu,utilization.memory,memory.total,memory.free,memory.used --format=csv -l 1"
alias nvhelp="nvidia-smi --help-query-gpu"
alias nvmem="nvidia-smi --query-gpu=timestamp,memory.used,memory.total --format=csv -l 1"
alias nvcent="nvidia-smi dmon -s u"
# PyPi pip3 install nvidia-ml-py3
# Conda conda install nvidia-ml-py3 -c fastai
{{- end }}

# Functions
{{- if (eq .system "ubuntu-workstation" ) }}
apt-list() {
    opts=$1
    if [[ -z "$opts" ]]; then
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n
    elif [[ "$opts" == '-p' || $opts == '--purge' ]]; then
        dpkg --list | grep "^rc" | cut -d " " -f 3
    elif [[ "$opts" == '--ppa' ]]; then
        apt-cache policy
    fi
}

aptup() {
    apt_bin="apt"
    [[ ! -z /usr/bin/apt-fast ]] && apt_bin="apt-fast" || :
    sudo ${apt_bin} update -y
    sudo ${apt_bin} upgrade -y
    sudo ${apt_bin} autoremove
}
{{- else if (eq .system "arch-laptop" "arch-asus") }}
pkgs() {
    # https://wiki.archlinux.org/title/Pacman/Tips_and_tricks
    opts=$1
    if [[ "$opts" == "-o" || "$opts" == "--orphans" ]]; then
        pacman -Qtdq
    elif [[ "$opts" == "-d" || "$opts" == "--desc" ]]; then
        expac -H M "%011m\t%-20n\t%10d" "$(comm -23 <(pacman -Qqen | sort) <({ pacman -Qqg base-devel; expac -l '\n' '%E' base; } | sort | uniq))" | sort
    elif [[ "$opts" == "-s" || "$opts" == "--size" ]]; then
        expac -H M '%m\t%n' | sort -h
    fi
}
{{- end }}

conda() {
    # Starts up conda automatically at the first call
    conda_install="/opt/{{- .conda -}}3/bin"
    res="${CONDA_EXE}"
    [[ -z $res ]] && conda-init || :
    $conda_install/conda $@
}

count() {
    # Count the number of characters in a line
    text=$1
    printf "%s" "$text" | wc -m
}

gdb() {
    # Wrapper around gdb that toggles gef configurations
    toggle="$1"
    if [[ "$toggle" == "--gef" ]]; then
        shift # Pops --gef wrapper option
        # /usr/bin/gdb -nx -x "$XDG_CONFIG_HOME"/gdb/init/gdbinit -ex "init-gef-config" "$@"
        /usr/bin/gdb -ex "init-gef-config" "$@"
    else
        # /usr/bin/gdb -nx -x "$XDG_CONFIG_HOME"/gdb/init/gdbinit "$@"
        /usr/bin/gdb "$@"
    fi
}
# Or optionally use these aliases
#alias gdb="exec gdb -nh -x \"\"$XDG_CONFIG_HOME\"/gdb/init/gdbinit\" \"$@\""
#alias gef="exec gdb -nh -x \"\"$XDG_CONFIG_HOME\"/gdb/init/gdbinit\" -ex init-gef-config \"$@\""

clean() {
    # Removes untracked configuration files that are in ~/.config, ~/.local/share/
    directory="$1"
    cleanbin="$HOME/.local/bin/clean"
    if [[ "$directory" == "cfg" ]]; then
        #clean $HOME.local/share/excludes/XDG-CONFIG.exclude.list ~/.config $@
        shift
        $cleanbin $excludes/XDG-CONFIG.exclude.list $XDG_CONFIG_HOME $@
    elif [[ "$directory" == "data" ]]; then
        shift
        $cleanbin $excludes/XDG-DATA.exclude.list $XDG_DATA_HOME $@
    else
        $cleanbin $@
    fi
}

sccache_restart() {
    # Restarts sccache
    sccache --stop-server
    sccache --start-server
}
alias sccache_neverexit='SCCACHE_IDLE_TIMEOUT=0 sccache --start-server &> /dev/null'

# Update the system's packages
update() {
    autorun=~/.config/dotfiles/scripts/autorun
    source "$autorun"/npmup.sh  # Update all npm packages
    source "$autorun"/pipup.sh  # Update all pip packages
    source "$autorun"/vimup.sh  # Update all vim plugins
    source "$autorun"/sdkup.sh  # Update all sdkman packages (gradle)
    source "$autorun"/rustup.sh # Update all rust cargo packages
    {{- if (eq .system "arch-laptop" ) }}
    yay -Syu
    {{- else if (eq .system "ubuntu-workstation" ) }}
    aptup
    {{- end }}
}

ccd() {
    # Shortcut to change directory to chezmoi path
    cd $(chezmoi source-path)
}

aursubmod() {
    # Add an aur repository as a git submodule
    repo_name="$1"
    git submodule add ssh://aur@aur.archlinux.org/$repo_name aur.archlinux.org/$repo_name
}
