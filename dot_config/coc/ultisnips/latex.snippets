# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
# Enable syntax highlighting of snippets
# vim:ft=snippets

# ==== TeX Snippets  ====

# ==== Contexts ====
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment():
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')")
	return x != '0' and y != '0'

endglobal

# ==== Shortcuts ====
snippet template "Basic Template" b
\documentclass{article}
\usepackage{$1}

\begin{document}
	${2:}
\end{document}
endsnippet

snippet temnotes "General Notes Template" b
\documentclass{article}
\usepackage{$1}

\begin{document}
\sect{${2:}}

\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	${2:}
\\end{$1}
endsnippet

snippet pac "Package" b
\usepackage{${1:package}}$0
endsnippet

snippet pacopt "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

# ==== Code ====
snippet pythonb "Python code block" b
\begin{minted}{Python}
	$1
\end{minted}
endsnippet

snippet javab "Java code block" b
\begin{minted}{Java}
	$1
\end{minted}
endsnippet

# ==== Tables ====
snippet inttable "Interval Table" b
\begin{table}[htbp]
    \centering
    \begin{tabular}{ *{${1:4}}{cc} }
        \toprule
        \phantom{} & $(-\infty, ${2:$1})$ & $(${3:$2}, ${4:$3})$ & $(${4:$4}, \infty)$ \\\
        \midrule
        $${5:$5}$ & $${6:$6}$ & $${7:$7}$ & $${8:$8}$ \\\
        $f(x)$ & d${9:$9} & ${10:$10} & ${11:$11} \\\
        \bottomrule
    \end{tabular}
\end{table}
endsnippet

snippet stdtable "Standard Table" b
\begin{table}[!htbp]
    \centering
    \begin{tabular}{ *{${1:$1}}{cc} }
        \toprule
        \midrule
        \bottomrule
    \end{tabular}
    \label{tab:${2:tbl1}}
    \caption{${3:3}}
\end{table}
endsnippet

snippet ztable "Checkered Table. Alternates white and grey every second row" b
\begin{table}[!htbp]
    \centering
    \rowcolors{2}{}{gray!10}
    \begin{tabular}{ *{${1:$1}}{cc} }
        \toprule
        \midrule
        \bottomrule
    \end{tabular}
    \label{tab:tbl1}
    \caption{}
\end{table}
endsnippet

snippet multi-math-table "Create a table that can contain multiple math tables" b
\begin{table}[!htb]
	\caption{$1}
	\centering
	% $2
	\begin{subtable}{$4\linewidth}
		\centering
		\caption{$3}
		\label{tbl:$4}
		$\begin{array}{ *{$5}{c} }
			% $5 centered columns
			\toprule \\\
			$6 \\\
			\midrule \\\
			$7 \\\
			\bottomrule
		\end{array}$
	\end{subtable}%
\end{table}
endsnippet

snippet multi-table "Create a table that can contain multiple tables" b
\begin{table}[!htb]
	\caption{$1}
	\centering
	% $2
	\begin{subtable}{$4\linewidth}
		\centering
		\caption{$3}
		\label{tbl:$4}
		\begin{tabular}{ *{$5}{c} }
			% $5 centered columns
			\toprule \\\
			$6 \\\
			\midrule \\\
			$7 \\\
			\bottomrule
		\end{tabular}
	\end{subtable}%
\end{table}
endsnippet

snippet submathtable "" b
\begin{subtable}{$1\linewidth}
	\centering
	\caption{$2}
	\label{tbl:$3}
	$\begin{array}{ *{$4}{c} }
		% $4 centered columns
		\toprule \\\
		$5 \\\
		\midrule \\\
		$6 \\\
		\bottomrule
	\end{array}$
\end{subtable}%
endsnippet

snippet subtable "" b
\begin{subtable}{$1\linewidth}
	\centering
	\caption{$2}
	\label{tbl:$3}
	\begin{tabular}{ *{$4}{c} }
		% $4 centered columns
		\toprule \\\
		$5 \\\
		\midrule \\\
		$6 \\\
		\bottomrule
	\end{tabular}
\end{subtable}%
endsnippet

## TabularX
snippet tabxenum "Vertically Aligns Texts" b
\noindent\begin{tabularx}{\linewidth}{@{}lX}
    $(${1:$1})$ & ${2:$2} \\\
\end{tabularx}
endsnippet

# This is useful for propositions
snippet tabxtext "Indents a body of text" b
\begin{tabularx}{${1:0.80\linewidth}}{@{}lX}
	& $2 \\\
\end{tabularx}
endsnippet

snippet roster "Roster/Tabular Form" b
\renewcommand{\arraystretch}{1.5}
\begin{tabular}{c@{\,}l@{}}
		& $${1:}$ \\\
		& $${2:}$ \\\
		\cline{2-2}
		$\therefore$ & $${3:}$ \\\
\end{tabular}
endsnippet

# ==== Figures ====
snippet svgfig "SVG Figure" b
\newfig{${1:filename}}{${2:caption}}
endsnippet

snippet subsvgfig "Nested SVG Figure" b
\subsvg{${1:filename}}{${2:caption}}{${2:width}}
endsnippet

snippet wrapfigtikz "Wrap TikZ Figure" b
\begin{minipage}{\textwidth}
\begin{wrapfigure}{${1:L}}{${2:0.5}\textwidth}
		\begin{tikzpicture}
				${3:$3}
		\end{tikzpicture}
\end{wrapfigure}
\end{minipage}
endsnippet

snippet tikfig "TikZ Picture" b
\begin{tikzpicture}
    ${1:$1}
\end{tikzpicture}
endsnippet

# ==== Items & Enums ====

snippet tabtext "Left Aligned Text Ad-hoc enum" b
\begin{tabular}{@{}l}
    $1 $ \\\
    $2 $?
\end{tabular}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

# ==== Symbols ====
snippet ... "ldots" b
\ldots
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

# ==== Context Snippets ====

## Math
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
\end{align*}
endsnippet

context "math()"
snippet dfrac "Fraction" b
\\dfrac{$1}{$2}$0
endsnippet

### Fractions
context "math()"
snippet // "Fraction" b
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

snippet == "equals" b
&= $1 \\\\
endsnippet

snippet != "equals" b
\neq
endsnippet

context "math()"
snippet ceil "ceil" b
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" b
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" b
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" b
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

context "math()"
snippet () "left( right)" b
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" b
\left<${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet conj "conjugate" b
\overline{$1}$0
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}}
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}}
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" b
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" b
^2
endsnippet

context "math()"
snippet cb "^3" b
^3
endsnippet

context "math()"
snippet td "to the ... power" b
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" b
^{($1)}$0
endsnippet

snippet __ "subscript" b
_{$1}$0
endsnippet

snippet ooo "\infty" b
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" b
\le
endsnippet

snippet >= "geq" b
\ge
endsnippet

context "math()"
snippet EE "geq" b
\exists
endsnippet

context "math()"
snippet AA "forall" b
\forall
endsnippet

context "math()"
snippet xnn "xn" b
x_{n}
endsnippet

context "math()"
snippet ynn "yn" b
y_{n}
endsnippet


context "math()"
snippet xii "xi" b
x_{i}
endsnippet

context "math()"
snippet yii "yi" b
y_{i}
endsnippet

context "math()"
snippet xjj "xj" b
x_{j}
endsnippet

context "math()"
snippet yjj "yj" b
y_{j}
endsnippet

context "math()"
snippet xp1 "x" b
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" b
x_{m}
endsnippet

snippet R0+ "R0+" b
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" b
\mathcal{$1}$0
endsnippet

snippet lll "l" b
\ell
endsnippet

context "math()"
snippet nabl "nabla" b
\nabla
endsnippet

context "math()"
snippet xx "cross" b
\times
endsnippet

priority 100
snippet ** "cdot" b
\cdot
endsnippet

context "math()"
snippet norm "norm" b
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" b
\to
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" b
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" b
\mapsto
endsnippet

context "math()"
snippet invs "inverse" b
^{-1}
endsnippet

context "math()"
snippet compl "complement" b
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" b
\setminus
endsnippet

snippet >> ">>" b
\gg
endsnippet

snippet << "<<" b
\ll
endsnippet


snippet ~~ "~" b
\sim
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

snippet || "mid" b
 \mid
endsnippet


context "math()"
snippet cc "subset" b
\subset
endsnippet

snippet notin "not in " b
\not\in
endsnippet

context "math()"
snippet inn "in " b
\in
endsnippet

snippet NN "n" b
\N
endsnippet

snippet Nn "cap" b
\cap
endsnippet

snippet UU "cup" b
\cup
endsnippet

snippet uuu "bigcup" b
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

snippet nnn "bigcap" b
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

snippet OO "emptyset" b
\O
endsnippet

snippet RR "real" b
\R
endsnippet

snippet QQ "Q" b
\Q
endsnippet

snippet ZZ "Z" b
\Z
endsnippet

snippet <! "normal" b
\triangleleft
endsnippet

snippet <> "hokje" b
\diamond
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" b
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet SI "SI" b
\SI{$1}{$2}
endsnippet

snippet bigfun "Big function" b
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" b
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" rb
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" rb
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" rb
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" rb
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" b
Let $\Omega \subset \C$ be open.
endsnippet

snippet HH "H" b
\mathbb{H}
endsnippet

snippet DD "D" b
\mathbb{D}
endsnippet

snippet nnl "Inserts align characters" b
& ${1:${VISUAL}} \\\ $0
endsnippet

snippet definition "Define new vocabulary" b
\begin{definition}[$1]
$2
\end{definition}
endsnippet

snippet subfile "Subfile shorthand " b
\documentclass[../../../../main.tex]{subfiles}
\graphicspath{{\subfix{../../../../figures}, ./figures}}
endsnippet

snippet doc "Create a new document" b
\begin{document}
$1
\end{document}
endsnippet

snippet uline "Underline some text" b
\underline{$1}
endsnippet

snippet coverpage "Cover page template" b
% Main cover page
\begin{titlepage}
	\begin{center}
		\vspace*{1cm}
			
		\Huge
		\textbf{$1}
			
		\vspace{0.5cm}
		\LARGE
		$2
			
		\vspace{1.5cm}
			
		\textbf{$3}
			
		\vfill
			
	\end{center}
\end{titlepage}
endsnippet

snippet newdef "Create a new definition" b
\begin{definition}[$1]\label{def:$2}
	$3
\end{definition}
endsnippet

snippet newquest "Create a new question" b
\begin{question}[$1]
	$2
\end{question}
endsnippet
